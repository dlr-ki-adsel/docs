{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ADSEL Documentation","text":"<p>This site provides documentation for using the Dataspace. This includes guides on naviagting the website on adsel.space as well as the API at api.adsel.space and much more.</p>"},{"location":"api/","title":"API","text":"<p>This section explains how to interact with the Dataspace using the API directly, rather than the website. It is located at api.adsel.space.</p>"},{"location":"api/bdrs/","title":"BDRS","text":"<p>The <code>BDRS</code> (BPN DID Resolution Service) is responsible for providing a mapping between <code>BPNs</code> and <code>DIDs</code>.</p>"},{"location":"api/bdrs/#management-api","title":"Management API","text":"<p>The <code>Management API</code> is used to manage the mapping. It is available at <code>/bdrs/management</code>, but only administrators have access to it. For detailled documentation on this API, see BDRS management-api.</p>"},{"location":"api/bdrs/#directoy-api","title":"Directoy API","text":"<p>The <code>Directory API</code> can be use to retrieve the mapping. It is available at <code>/bdrs/directory</code>. For detailled documentation on this API, see BDRS directoy-api.</p>"},{"location":"api/connector-apis/","title":"Connector APIs","text":"<p>The Connector consists of several software components. Each of these expose several APIs. Please refer to other parts of this documentation, for more information on the components in general.</p>"},{"location":"api/connector-apis/#controlplane","title":"Controlplane","text":""},{"location":"api/connector-apis/#management-api","title":"Management API","text":"<p>The <code>Management API</code> lets you manage all your <code>Assets</code>, <code>Policy Definitions</code>, etc. It is available at <code>/connectors/&lt;connector-name&gt;/management</code> and all of its endpoints are protected. For detailled documentation on this API, see Tractus-X EDC control-plane API. Note that the section \"Application Observability\" in the Tractus-X EDC documentation is not part of the <code>Management API</code> but part of the <code>Default API</code> instead.</p>"},{"location":"api/connector-apis/#dsp-api","title":"DSP API","text":"<p>The <code>DSP API</code> enables communication between Connectors and only meant to be used directly by Connectors themselves. It is available at <code>/connectors/&lt;connector-name&gt;/dsp</code>. For detailled documentation on this API, see EDC dsp-api.</p>"},{"location":"api/connector-apis/#default-api","title":"Default API","text":"<p>The <code>Default API</code> exposes endpoints for checking health, readiness and simlar status indicators. It is available at <code>/connectors/&lt;connector-name&gt;/default</code>. For detailled documentation on this API, see Tractus-X EDC control-plane API, specifically the \"Application Observability\" section.</p>"},{"location":"api/connector-apis/#dataplane","title":"Dataplane","text":""},{"location":"api/connector-apis/#public-api","title":"Public API","text":"<p>The <code>Public API</code> is used to perform <code>PULL</code> transfers and consists of only a single endpoint. It is available at <code>/connectors/&lt;connector-name&gt;/public</code>. For an example on how to utilize this API, see Tractus-X EDC Walkthrough.</p>"},{"location":"api/connector-apis/#proxy-api","title":"Proxy API","text":"<p>The <code>Proxy API</code> can also alternatively be used for <code>PULL</code> transfers. It is available at <code>/connectors/&lt;connector-name&gt;/proxy</code> and all of its endpoints are protected. For an example on how to utilize this API, see Tractus-X EDC Walkthrough.</p>"},{"location":"api/connector-apis/#identity-hub","title":"Identity Hub","text":""},{"location":"api/connector-apis/#identity-api","title":"Identity API","text":"<p>The <code>Identity API</code> is used to manage your <code>DID documents</code>, <code>Verifiably Credentials</code>, etc. It is available at <code>/connectors/&lt;connector-name&gt;/ih/identity</code> and all of its endpoints are protected. For detailled documentation on this API, see IdentityHub identity-api.</p>"},{"location":"api/connector-apis/#presentation-api","title":"Presentation API","text":"<p>The <code>Presentation API</code> allows clients to request credentials in the form of a <code>Verifiable Presentation</code>. It is available at <code>/connectors/&lt;connector-name&gt;/ih/presentation</code>. For detailled documentation on this API, see IdentityHub presentation-api.</p>"},{"location":"api/connector-apis/#sts-api","title":"STS API","text":"<p>The <code>STS API</code> is responsible for generating <code>ID-Tokens</code> to access the <code>Presentation API</code>. It is available at <code>/connectors/&lt;connector-name&gt;/ih/sts</code> and all of its endpoints are protected. As it is only supposed to be used internally, this documentation will not provide a detailled description.</p>"},{"location":"api/connector-apis/#did-document","title":"DID Document","text":"<p>The <code>DID Document</code> can of a Connector viewed by sending a <code>GET</code> request to <code>/connector/&lt;connector-name&gt;/did.json</code>.</p>"},{"location":"api/connector-apis/#vault-token","title":"Vault Token","text":"<p>The vault token to access the <code>Hashicorp Vault</code> at vault.adsel.space can be retrieved by making a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/vault/token</code>. The vault can be used to provide the Connector with confidential information thourgh there rather than sending them directly in requests to the Connector.</p>"},{"location":"api/connectors/","title":"Connectors","text":"<p>Just like you manage Connectors through the website, you can also manage them via the API. This section describes exactly how to do this. All endpoints described here are protected.</p>"},{"location":"api/connectors/#create-connectors","title":"Create Connectors","text":"<p>You can create a Connector by sending a <code>POST</code> request to <code>/connectors/&lt;your-chosen-connector-name&gt;</code>.</p> <p>The payload must be provided as a <code>JSON</code>. If you intend on only using the <code>API</code> you can simply send <code>{}</code> as payload. However, if you want to also use this Connector via the website you need to provide correct storage credentials in the payload.</p> <p>After a successful request the Connector will be created and begin to start up.</p>"},{"location":"api/connectors/#amazons3","title":"AmazonS3","text":"<p>For explanations on the exact values you need to provide, please refer to the website documentation.</p> <pre><code>{\n    \"endpointOverride\": \"&lt;endpoint&gt;\",\n    \"region\": \"&lt;region&gt;\",\n    \"accessKeyIdRead\": \"&lt;username-read&gt;\",\n    \"secretAccessKeyRead\": \"&lt;password-read&gt;\",\n    \"accessKeyIdWrite\": \"&lt;username-write&gt;\",\n    \"secretAccessKeyWrite\": \"&lt;password-write&gt;\",\n    \"bucketName\": \"&lt;bucket-name&gt;\"\n}\n</code></pre>"},{"location":"api/connectors/#azurestorage","title":"AzureStorage","text":"<p>For explanations on the exact values you need to provide, please refer to the website documentation.</p> <pre><code>{\n    \"blobstoreEndpointTemplate\": \"&lt;endpoint-template&gt;\",\n    \"accountKeyRead\": \"&lt;username-read&gt;\",\n    \"accountNameRead\": \"&lt;password-read&gt;\",\n    \"accountKeyWrite\": \"&lt;username-write&gt;\",\n    \"accountNameWrite\": \"&lt;password-write&gt;\",\n    \"containerName\": \"&lt;container-name&gt;\"\n}\n</code></pre> <p>Note: Azure Storage is currently not usable due to a bug in the Connector.</p>"},{"location":"api/connectors/#edit-connectors","title":"Edit Connectors","text":"<p>Simlarly to creating a Connector you can edit a Connector by sending a <code>PUT</code> request to <code>/connectors/&lt;connector-name&gt;</code>. The payload you need to provide here is exactly the same as for creating a Connector. After a successful request the Connector will restart using the newly provided configuration.</p>"},{"location":"api/connectors/#get-connectors","title":"Get Connectors","text":"<p>You can get a list of all your Connectors by sending a <code>GET</code> request to <code>/connectors</code>. If you want to get only a specific Connector you can send a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;</code>.</p>"},{"location":"api/connectors/#start-and-stop-connectors","title":"Start and Stop Connectors","text":"<p>To start and stop a Connector you can send a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/start</code> and <code>/connectors/&lt;connector-name&gt;/stop</code> respectively.</p>"},{"location":"api/connectors/#fail-connectors","title":"Fail Connectors","text":"<p>In some cases a Connector might be stuck in some unwanted state because of a bug. If that is the case you can get the Connector into the <code>FAILED</code> state by sending a <code>GET</code> request to <code>/connectors/&lt;connector-name&gt;/fail</code>. From there you can either stop or delete the Connector. Note, however, that this does not necessarily mitigate the bug.</p>"},{"location":"api/federated/","title":"Federated","text":"<p>There are a number of endpoints which can be used to retrieve aggregate information on all users overall.</p>"},{"location":"api/federated/#user","title":"User","text":"<p>A mapping of users to the list of <code>BPNs</code> of their Connectors can be retrieved by sending a <code>GET</code> request to <code>/federated/user</code>.</p>"},{"location":"api/federated/#group","title":"Group","text":"<p>A mapping of groups to the list of users in it can be retrieved by sending a <code>GET</code> request to <code>/federated/group</code>.</p>"},{"location":"api/federated/#did","title":"DID","text":"<p>A list of the <code>DIDs</code> of all running Connectors can be retrieved by sending a <code>GET</code> request to <code>/federated/did</code>.</p>"},{"location":"api/federated/#bpn","title":"BPN","text":"<p>A mapping of Connector <code>BPNs</code> to their user can be retrieved by sending a <code>GET</code> request to <code>/federated/bpn</code>.</p>"},{"location":"api/federated/#catalog","title":"Catalog","text":"<p>A collection of all offers of all running Connectors, the <code>Federated Catalog</code>, can be retrieved by sending a <code>GET</code> request to <code>/federated/catalog</code>. One can optionally specify a \"group\" argument to only get the offers of users in the specified group.</p>"},{"location":"api/federated/#catalog-post","title":"Catalog (POST)","text":"<p>In addition to the regular catalog endpoint one can also send a <code>POST</code> request to <code>/federated/catalog/query</code> to formulate more specific criteria. For more information on this, see Federated Catalog catalog-api.</p>"},{"location":"api/getting-started/","title":"Getting started","text":"<p>To use most API endpoints you need to provide a bearer token (JWT) in the <code>Authorization</code> header of you requests. This token can be aquired from Keycloak running on sso.adsel.space via mTLS.</p>"},{"location":"api/getting-started/#get-your-certificate","title":"Get your Certificate","text":"<ol> <li>Sign in at adsel.space</li> <li>Download the <code>cert.zip</code> file by clicking on the download button in the upper right corner</li> <li>Unzip the file and store the contained files (tls.crt, tls.key and ca.crt) somewhere on your device</li> </ol>"},{"location":"api/getting-started/#get-a-bearer-token","title":"Get a Bearer Token","text":"<p>Now you can get the token by sending a request to the Token Endpoint of Keycloak using the certificate files. Concrete instructions on how to do this with several tools are further below.</p> <p>The response should look something like this <pre><code>{\n  \"access_token\": \"ey...\",\n  \"expires_in\": 28800,\n  \"refresh_expires_in\": 0,\n  \"token_type\": \"Bearer\",\n  \"id_token\": \"ey...\",\n  \"not-before-policy\": 0,\n  \"scope\": \"openid profile email\"\n}\n</code></pre></p> <p>For most API requests, you must include the <code>access_token</code> in the <code>Authorization</code> header using the format: <code>Authorization: Bearer &lt;your-access-token&gt;</code>. Such endpoints will hereafter be referred to as 'protected'.</p> <p>Note that this token is valid for 8 hours, after which you will need to send another request to get a new one.</p>"},{"location":"api/getting-started/#example-requests","title":"Example requests","text":"<p>Here are a concrete examples on how to use the certificate files to send the request to get the token.</p>"},{"location":"api/getting-started/#curl","title":"curl","text":"<pre><code>curl -k --cert &lt;cert-files-dir&gt;/tls.crt --key &lt;cert-files-dir&gt;/tls.key --cacert &lt;cert-files-dir&gt;/ca.crt \\\n  -X POST \"https://sso.adsel.space/realms/user/protocol/openid-connect/token\" \\\n  -d \"client_id=client-&lt;your-username&gt;\" \\\n  -d \"grant_type=client_credentials\" \\\n  -d \"scope=openid\"\n</code></pre>"},{"location":"api/getting-started/#python","title":"python","text":"<pre><code>from pathlib import Path\nimport requests\n\nusername = \"&lt;your-username&gt;\"\n\ncert_files_dir = Path(\"&lt;cert-files-dir&gt;\")\ncert = (cert_files_dir / \"tls.crt\", cert_files_dir / \"tls.key\")\nverify = cert_files_dir / \"ca.crt\"\n\nurl = \"https://sso.adsel.space/realms/user/protocol/openid-connect/token\"\ndata = {\n    \"client_id\": f\"client-{username}\",\n    \"grant_type\": \"client_credentials\",\n    \"scope\": \"openid\"\n}\n\nresponse = requests.post(url, data=data, cert=cert, verify=verify)\n\nprint(response.json())\n</code></pre>"},{"location":"api/issuer/","title":"Issuer","text":"<p>The Issuer is responsible for issuing <code>Verifiable Credentials</code> and verifying <code>Verifiably Presentations</code>.</p>"},{"location":"api/issuer/#issue-credentials","title":"Issue Credentials","text":"<p>Credentials can be issued by sending a <code>POST</code> request to <code>/issuer/issue</code>. As this endpoint is protected and can only be used by administrators, this documentation will provide no detailled explanation on this endpoint.</p>"},{"location":"api/issuer/#did-document","title":"DID Document","text":"<p>The <code>DID Document</code> can be viewed by sending a <code>GET</code> request to <code>/issuer/did.json</code>. It can be used to verify <code>Verifiable Credentials</code> that where issued by the Issuer.</p>"},{"location":"frontend/frontend/","title":"DLR Dataspace Platform","text":"<p>A federated data marketplace that enables secure data sharing and collaboration across organizations while maintaining full control over your assets.</p>"},{"location":"frontend/frontend/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Key Features</li> <li>Getting Started</li> <li>Platform Components</li> <li>Dashboard</li> <li>Connectors</li> <li>Your Assets</li> <li>Federated Catalog</li> <li>Agreements</li> <li>Supported Storage Types</li> <li>Security &amp; Authentication</li> <li>Data Sharing Workflow</li> <li>Policies &amp; Permissions</li> <li>Pro Tips</li> </ul>"},{"location":"frontend/frontend/#overview","title":"Overview","text":"<p>The DLR Dataspace Platform is a comprehensive solution for federated data sharing that allows organizations to:</p> <ul> <li>Securely connect their storage systems to a shared dataspace</li> <li>Discover and access data assets from other participating organizations</li> <li>Control sharing permissions through flexible policy management</li> <li>Track data transfers and manage agreements in real-time</li> <li>Maintain data sovereignty while enabling collaboration</li> </ul>"},{"location":"frontend/frontend/#key-features","title":"Key Features","text":""},{"location":"frontend/frontend/#federated-architecture","title":"\ud83d\udd17 Federated Architecture","text":"<ul> <li>Distributed catalog system aggregating assets from all participants</li> <li>Real-time updates as new offers are created or modified</li> <li>Policy-aware browsing showing only accessible assets</li> </ul>"},{"location":"frontend/frontend/#security-first","title":"\ud83d\udee1\ufe0f Security First","text":"<ul> <li>Industry-standard encryption for all credentials</li> <li>Role-based access control through group management</li> <li>Comprehensive audit trails for all data transfers</li> </ul>"},{"location":"frontend/frontend/#powerful-discovery","title":"\ud83d\udd0d Powerful Discovery","text":"<ul> <li>Advanced search functionality across all federated assets</li> <li>Filter by provider, file type, creation date, and custom metadata</li> <li>Visual asset browsing with rich metadata display</li> </ul>"},{"location":"frontend/frontend/#seamless-integration","title":"\u26a1 Seamless Integration","text":"<ul> <li>Support for major cloud storage providers (S3, Azure Storage)</li> <li>RESTful APIs for programmatic access</li> <li>Intuitive web interface for manual operations</li> </ul>"},{"location":"frontend/frontend/#getting-started","title":"Getting Started","text":""},{"location":"frontend/frontend/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to supported storage systems (Amazon S3 or Azure Storage)</li> <li>Valid credentials for your storage accounts</li> <li>Network connectivity to the DLR Dataspace</li> </ul>"},{"location":"frontend/frontend/#quick-start","title":"Quick Start","text":"<ol> <li>Set up a Connector</li> <li>Navigate to the Dashboard or Connectors page</li> <li>Click \"New Connector\" and select your storage type</li> <li>Provide authentication credentials</li> <li> <p>Test and validate the connection</p> </li> <li> <p>Upload or Organize Assets</p> </li> <li>Visit \"Your Assets\" to browse your connected storage</li> <li>Upload new files or organize existing ones into folders</li> <li> <p>Prepare assets for sharing with descriptive names</p> </li> <li> <p>Create Your First Offer</p> </li> <li>Select assets you want to share</li> <li>Click \"Create Offer\" </li> <li>Choose or create appropriate access policies</li> <li> <p>Submit to make assets available in the Federated Catalog</p> </li> <li> <p>Discover and Access Data</p> </li> <li>Browse the Federated Catalog for available assets</li> <li>Use search and filters to find relevant data</li> <li>Request access to assets that match your needs</li> </ol>"},{"location":"frontend/frontend/#platform-components","title":"Platform Components","text":""},{"location":"frontend/frontend/#dashboard","title":"Dashboard","text":"<p>Your central command center providing: - Connector Status Monitoring: Real-time health checks and connection status - Group Visualization: Interactive pie chart showing dataspace organization structure - Quick Actions: Direct access to connector management and settings - System Health: Overall platform status and synchronization information</p>"},{"location":"frontend/frontend/#connectors","title":"Connectors","text":"<p>The bridge between your storage systems and the dataspace:</p>"},{"location":"frontend/frontend/#supported-types","title":"Supported Types","text":"<ul> <li>Amazon S3: Full integration with AWS S3 buckets</li> <li>Azure Storage: Connect to Microsoft Azure Blob Storage (coming soon)</li> </ul>"},{"location":"frontend/frontend/#management-features","title":"Management Features","text":"<ul> <li>Status Monitoring: Connection health and synchronization status</li> <li>Credential Management: Secure storage of authentication information</li> <li>Configuration: Easy setup wizard with validation</li> <li>Maintenance: Delete unused connectors with safety confirmations</li> </ul>"},{"location":"frontend/frontend/#your-assets","title":"Your Assets","text":"<p>Personal data management workspace featuring:</p>"},{"location":"frontend/frontend/#file-operations","title":"File Operations","text":"<ul> <li>Upload: Direct file upload or drag-and-drop functionality</li> <li>Organization: Create folders and manage file hierarchy</li> <li>Download: Access your own assets and those obtained from others</li> <li>Deletion: Remove unused files with impact warnings</li> </ul>"},{"location":"frontend/frontend/#sharing-capabilities","title":"Sharing Capabilities","text":"<ul> <li>Offer Creation: Transform assets into shareable offerings</li> <li>Policy Selection: Apply predefined or custom access policies</li> <li>History Tracking: Monitor all sharing activities and agreements</li> <li>Status Indicators: Visual cues for shared asset status</li> </ul>"},{"location":"frontend/frontend/#federated-catalog","title":"Federated Catalog","text":"<p>Marketplace for discovering data across the entire dataspace:</p>"},{"location":"frontend/frontend/#discovery-features","title":"Discovery Features","text":"<ul> <li>Comprehensive Search: Keyword search across names, descriptions, and metadata</li> <li>Advanced Filtering: Filter by provider, type, date, size, and custom attributes</li> <li>Visual Browsing: Card-based layout with rich asset information</li> <li>Preview Options: Quick preview for compatible file types</li> </ul>"},{"location":"frontend/frontend/#asset-information","title":"Asset Information","text":"<p>Each listing includes: - Asset name and detailed description - Provider organization information - File type, size, and format details - Creation and modification timestamps - Associated access policies and restrictions - Custom metadata and categorization tags</p>"},{"location":"frontend/frontend/#agreements","title":"Agreements","text":"<p>Manage active data sharing agreements:</p>"},{"location":"frontend/frontend/#agreement-management","title":"Agreement Management","text":"<ul> <li>Status Tracking: Monitor transfer states with visual indicators</li> <li>Transfer Actions: Initiate new transfers or re-transfers</li> <li>History View: Complete audit trail of all data exchanges</li> <li>Search &amp; Filter: Find specific agreements by various criteria</li> </ul>"},{"location":"frontend/frontend/#transfer-process","title":"Transfer Process","text":"<ol> <li>View available agreements in card-based dashboard</li> <li>Click Transfer or Re-transfer button as needed</li> <li>Confirm action in security dialog</li> <li>Monitor real-time status updates</li> <li>Access transferred data through Your Assets</li> </ol>"},{"location":"frontend/frontend/#supported-storage-types","title":"Supported Storage Types","text":""},{"location":"frontend/frontend/#amazon-s3","title":"Amazon S3","text":"<p>Required Credentials: - Access Key ID - Secret Access Key - Region - Bucket Name</p>"},{"location":"frontend/frontend/#azure-storage-coming-soon","title":"Azure Storage (Coming Soon)","text":"<p>Required Credentials: - Storage Account Name - Storage Account Key - Container Name - Connection String (optional)</p>"},{"location":"frontend/frontend/#security-authentication","title":"Security &amp; Authentication","text":""},{"location":"frontend/frontend/#credential-protection","title":"Credential Protection","text":"<ul> <li>Encryption: All credentials encrypted using industry-standard methods</li> <li>Secure Storage: No plain-text credential storage</li> <li>Access Control: Role-based permissions for connector management</li> <li>Audit Logging: Complete activity logs for security monitoring</li> </ul>"},{"location":"frontend/frontend/#data-protection","title":"Data Protection","text":"<ul> <li>In-Transit Encryption: All data transfers use TLS/SSL</li> <li>Access Policies: Granular control over who can access what data</li> <li>Time-Limited Access: Support for expiring permissions</li> <li>Usage Restrictions: Define how shared data can be used</li> </ul>"},{"location":"frontend/frontend/#data-sharing-workflow","title":"Data Sharing Workflow","text":""},{"location":"frontend/frontend/#for-data-providers","title":"For Data Providers","text":"<ol> <li>Connect Storage \u2192 Set up connectors to your storage systems</li> <li>Organize Assets \u2192 Structure and prepare data for sharing</li> <li>Create Offers \u2192 Define what to share and under what conditions</li> <li>Manage Agreements \u2192 Monitor and manage data access requests</li> <li>Track Usage \u2192 Monitor how your shared data is being accessed</li> </ol>"},{"location":"frontend/frontend/#for-data-consumers","title":"For Data Consumers","text":"<ol> <li>Discover Assets \u2192 Browse the Federated Catalog for relevant data</li> <li>Request Access \u2192 Initiate agreement process for desired assets</li> <li>Accept Policies \u2192 Agree to usage terms and conditions</li> <li>Transfer Data \u2192 Download or access approved assets</li> <li>Manage Downloads \u2192 Organize received data in Your Assets</li> </ol>"},{"location":"frontend/frontend/#policies-permissions","title":"Policies &amp; Permissions","text":""},{"location":"frontend/frontend/#policy-types","title":"Policy Types","text":"<ul> <li>Group-Based Access: Share with specific organizational groups</li> <li>Time-Limited Access: Set expiration dates for data access</li> <li>Usage Restrictions: Define how data can be used and redistributed</li> <li>Custom Policies: Create advanced rules for specific requirements</li> </ul>"},{"location":"frontend/frontend/#permission-management","title":"Permission Management","text":"<ul> <li>Predefined Templates: Ready-made policies for common scenarios</li> <li>Fine-Grained Control: Detailed access and usage specifications</li> <li>Dynamic Updates: Modify policies without disrupting active agreements</li> <li>Compliance Support: Built-in support for regulatory requirements</li> </ul>"},{"location":"frontend/frontend/#pro-tips","title":"Pro Tips","text":""},{"location":"frontend/frontend/#getting-started_1","title":"Getting Started","text":"<ul> <li>Connector First: Set up at least one connector before exploring other features</li> <li>Organization Matters: Structure your assets logically before creating offers</li> <li>Descriptive Naming: Use clear, descriptive names for better discoverability</li> </ul>"},{"location":"frontend/frontend/#optimization","title":"Optimization","text":"<ul> <li>Regular Monitoring: Check your Dashboard regularly for connector health</li> <li>Strategic Filtering: Use advanced filters in the catalog to find exactly what you need</li> <li>Policy Planning: Think carefully about access policies before sharing sensitive data</li> </ul>"},{"location":"frontend/frontend/#best-practices","title":"Best Practices","text":"<ul> <li>Metadata Rich: Add comprehensive metadata to improve asset discoverability</li> <li>Version Control: Use clear versioning strategies for evolving datasets</li> <li>Regular Cleanup: Remove unused connectors and outdated offers periodically</li> <li>Security First: Regularly review and update access policies</li> </ul>"},{"location":"frontend/frontend/#support-documentation","title":"Support &amp; Documentation","text":"<p>For additional help and detailed technical documentation, please refer to the in-platform help system or contact your system administrator.</p> <p>Platform Version: Current Last Updated: 2025</p> <p>The DLR Dataspace Platform - Enabling secure, federated data collaboration across organizations.</p>"},{"location":"home/","title":"ADSEL Documentation","text":"<p>This site provides documentation for using the Dataspace. This includes guides on naviagting the website on adsel.space as well as the API at api.adsel.space and much more.</p>"},{"location":"home/account/","title":"Account","text":""},{"location":"home/account/#login","title":"Login","text":"<p>You can log in at adsel.space using you username and password. After logging in you will be able to create your own Connector with which you can create offers for your data and services as well as negotiate and transfer existing offer from other participants.</p>"},{"location":"home/account/#settings","title":"Settings","text":"<p>To manage your account settings you can log in at auth.adsel.space. There you can edit some of your personal information.</p> <p>Additionally, in the \"Account security\" section under \"Signing in\" you change your password or enable two-factor authentication for your account using your preferred authenticator app or similar.</p>"},{"location":"home/references/","title":"References","text":"<p>There is a plethora of resources describing how the dataspace technology works. Below are some of the most important ones</p>"},{"location":"home/references/#software","title":"Software","text":"<ul> <li>EDC</li> <li>TractusX-EDC</li> <li>Identity Hub</li> </ul>"},{"location":"home/references/#documentation","title":"Documentation","text":"<ul> <li>EDC</li> <li>TractusX-EDC</li> <li>Data Space Protocol</li> <li>Decentralized Claims Protocol</li> </ul>"},{"location":"jupyter/","title":"Jupyter","text":"<p>This section provides some <code>Jupyter</code> notebooks to illustrate how one can create an offer for some data or service and much more. Feel free to download them and try it out yourself.</p>"},{"location":"jupyter/negotiate-offer/","title":"Negotiate Offer","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> from pprint import pprint import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" <p>Gets and prints out the relevant conents of the Federated Catalog.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/federated/catalog\"\n\nresponse = requests.get(url)\nresponse.raise_for_status()\nprint(\"Got the federated catalog\")\n\nfederated_catalog = response.json()\nfor catalog in federated_catalog:\n  print(f\"Catalog from {catalog['originator']}\")\n  datasets = catalog[\"dcat:dataset\"]\n  if not isinstance(datasets, list):\n    datasets = [datasets]\n  for dataset in datasets:\n    if \"name\" not in dataset:\n      continue\n    print(f\"    Offer for {dataset['name']}\")\n</pre> url = f\"{base_url}/federated/catalog\"  response = requests.get(url) response.raise_for_status() print(\"Got the federated catalog\")  federated_catalog = response.json() for catalog in federated_catalog:   print(f\"Catalog from {catalog['originator']}\")   datasets = catalog[\"dcat:dataset\"]   if not isinstance(datasets, list):     datasets = [datasets]   for dataset in datasets:     if \"name\" not in dataset:       continue     print(f\"    Offer for {dataset['name']}\") <p>Pick out an Offer from the printed ones and fill in the below values for the variables accordingly.</p> In\u00a0[\u00a0]: Copied! <pre>catalog_from = \"https://api.adsel.space/connectors/alice/dsp\"\noffer_for = \"some-offer-name\"\n</pre> catalog_from = \"https://api.adsel.space/connectors/alice/dsp\" offer_for = \"some-offer-name\" <p>Gets the necessary data about the chosen Offer from the Federated Catalog in order to start a Negotiation and an eventual Transfer in the next steps.</p> In\u00a0[\u00a0]: Copied! <pre>for catalog in federated_catalog:\n  if catalog[\"originator\"] != catalog_from:\n    continue\n  datasets = catalog[\"dcat:dataset\"]\n  if not isinstance(datasets, list):\n    datasets = [datasets]\n  for dataset in datasets:\n    if not \"name\" in dataset or dataset[\"name\"] != offer_for:\n      continue\n    provider_id = catalog[\"dspace:participantId\"]\n    originator = catalog[\"originator\"]\n    policy = dataset[\"odrl:hasPolicy\"]\n    offered_asset_id = dataset[\"id\"]\n\nprint(\"Got necessary values\\n\")\n\nprint(f\"ProviderId:  {provider_id}\")\nprint(f\"Originator: {originator}\")\nprint(f\"Policy: {policy}\")\nprint(f\"OfferedAssetId: {offered_asset_id}\")\n</pre> for catalog in federated_catalog:   if catalog[\"originator\"] != catalog_from:     continue   datasets = catalog[\"dcat:dataset\"]   if not isinstance(datasets, list):     datasets = [datasets]   for dataset in datasets:     if not \"name\" in dataset or dataset[\"name\"] != offer_for:       continue     provider_id = catalog[\"dspace:participantId\"]     originator = catalog[\"originator\"]     policy = dataset[\"odrl:hasPolicy\"]     offered_asset_id = dataset[\"id\"]  print(\"Got necessary values\\n\")  print(f\"ProviderId:  {provider_id}\") print(f\"Originator: {originator}\") print(f\"Policy: {policy}\") print(f\"OfferedAssetId: {offered_asset_id}\") <p>Here you start a Negotiation for the Offer chosen in the previous step. If the given conditions are satisfied the Negotiation will succeed and an Agreement will be created.</p> <p>Starts the Negotiation using the values got from the previous step.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/contractnegotiations\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"protocol\": \"dataspace-protocol-http\",\n  \"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}}\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\nnegotiation_id = response.json()[\"@id\"]\nprint(f\"Started Negotiation with ID: {negotiation_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/contractnegotiations\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"protocol\": \"dataspace-protocol-http\",   \"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}} }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  negotiation_id = response.json()[\"@id\"] print(f\"Started Negotiation with ID: {negotiation_id}\") <p>Wait a few seconds.</p> <p>Confirms that the Negotiation succeeded and get the ID corresponding Agreement which will be needed for the eventual Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/contractnegotiations/{negotiation_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Negotiation data:\\n\")\npprint(response.json())\n\nagreement_id = response.json()[\"contractAgreementId\"]\n\nprint(f\"Originator: {originator}\")\nprint(f\"Agreement ID: {agreement_id}\")\n</pre> url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/contractnegotiations/{negotiation_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Negotiation data:\\n\") pprint(response.json())  agreement_id = response.json()[\"contractAgreementId\"]  print(f\"Originator: {originator}\") print(f\"Agreement ID: {agreement_id}\") <p>If everything was successful you should now have gotten the releveant information for starting a Transfer. If you get an error it might be that the Negotiation has not finished yet or was rejected.</p>"},{"location":"jupyter/negotiate-offer/#negotiate-offer","title":"Negotiate Offer\u00b6","text":"<p>With this notebook you can start a Negotiation for an existing offer and thus generate an Agreement.</p>"},{"location":"jupyter/negotiate-offer/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/negotiate-offer/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/negotiate-offer/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/negotiate-offer/#get-federated-catalog","title":"Get Federated Catalog\u00b6","text":"<p>Here you get the contents of the Federated Catalog and then choose an Offer you want to negotiate for.</p>"},{"location":"jupyter/negotiate-offer/#initiate-negotiation","title":"Initiate Negotiation\u00b6","text":""},{"location":"jupyter/offer-file-amazon/","title":"Offer File (AmazonS3)","text":"In\u00a0[4]: Copied! <pre>import requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your AmazonS3 storage\naws_url = \"https://s3.us-east-1.amazonaws.com\"\n# The region of your AmazonS3 storage\naws_region = \"us-east-1\"\n# The username (Access Key ID) of your AmazonS3 storage account\naws_username = \"my-access-key-id\"\n# The password (Secret Access ID) of your AmazonS3 storage account\naws_password = \"my-secret-access-key\"\n# The bucket where your file is located\naws_bucket = \"my-bucket\"\n# The name of the file\nfilename = \"my-file.txt\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your AmazonS3 storage aws_url = \"https://s3.us-east-1.amazonaws.com\" # The region of your AmazonS3 storage aws_region = \"us-east-1\" # The username (Access Key ID) of your AmazonS3 storage account aws_username = \"my-access-key-id\" # The password (Secret Access ID) of your AmazonS3 storage account aws_password = \"my-secret-access-key\" # The bucket where your file is located aws_bucket = \"my-bucket\" # The name of the file filename = \"my-file.txt\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"File {filename}\",\n    \"description\": \"File offer example with AmazonS3\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"AmazonS3\",\n    \"objectName\": filename,\n    \"region\": aws_region,\n    \"bucketName\": aws_bucket,\n    \"endpointOverride\": aws_url,\n    \"accessKeyId\": aws_username,\n    \"secretAccessKey\": aws_password\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"File {filename}\",     \"description\": \"File offer example with AmazonS3\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"AmazonS3\",     \"objectName\": filename,     \"region\": aws_region,     \"bucketName\": aws_bucket,     \"endpointOverride\": aws_url,     \"accessKeyId\": aws_username,     \"secretAccessKey\": aws_password   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-policy-id\"\n</pre> # Some unique ID contract_id = \"my-policy-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": policy_id,\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": policy_id,   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-file-amazon/#offer-file-amazons3","title":"Offer File (AmazonS3)\u00b6","text":"<p>With this notebook you can create an offer for a file contained in an <code>AmazonS3</code> storage in the Dataspace.</p>"},{"location":"jupyter/offer-file-amazon/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-file-amazon/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-file-amazon/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/offer-file-amazon/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for the file you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually retrieve the data to transfer it (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-file-amazon/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-file-amazon/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/offer-file-azure/","title":"Offer File (AzureStorage)","text":"In\u00a0[4]: Copied! <pre>import requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# Your account in the Azure Storage\nazure_account = \"my-account\"\n# The secret in the vault where your password (Account Key) for Azure Storage is stored\nazure_password = f\"{azure_account}-key\"\n# The container where your file is located\nazure_container = \"my-container\"\n# The name of the file\nfilename = \"my-file.txt\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # Your account in the Azure Storage azure_account = \"my-account\" # The secret in the vault where your password (Account Key) for Azure Storage is stored azure_password = f\"{azure_account}-key\" # The container where your file is located azure_container = \"my-container\" # The name of the file filename = \"my-file.txt\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"File {filename}\",\n    \"description\": \"File offer example with AzureStorage\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"AzureStorage\",\n    \"blobName\": filename,\n    \"account\": azure_account,\n    \"container\": azure_container,\n    \"keyName\": azure_password,\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"File {filename}\",     \"description\": \"File offer example with AzureStorage\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"AzureStorage\",     \"blobName\": filename,     \"account\": azure_account,     \"container\": azure_container,     \"keyName\": azure_password,   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v2/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v2/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-policy-id\"\n</pre> # Some unique ID contract_id = \"my-policy-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v2/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": policy_id,\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v2/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": policy_id,   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-file-azure/#offer-file-azurestorage","title":"Offer File (AzureStorage)\u00b6","text":"<p>With this notebook you can create an offer for a file contained in an <code>AzureStorage</code> storage in the Dataspace.</p>"},{"location":"jupyter/offer-file-azure/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-file-azure/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-file-azure/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p> <p>Note that unlike the <code>AmazonS3</code> example, here you can not provide the URL of your storage directly. Neither can you specify your password (Account Key). Instead the URL is a Connector wide setting which can only be configured when creating or editing a Connector. Additionally, the password is retrieved from the vault. For this you can either manually put the password (base64 encoded) in the vault or use the one that is automatically created when starting a Connector for <code>AzureStorage</code>. This secret is called <code>&lt;your-account-name&gt;-key</code>.</p>"},{"location":"jupyter/offer-file-azure/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for the file you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually retrieve the data to transfer it (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-file-azure/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-file-azure/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/offer-service-http/","title":"Offer Service (HTTP)","text":"In\u00a0[\u00a0]: Copied! <pre>import requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL for your REST API\napi_url = \"https://echo.free.beeceptor.com\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL for your REST API api_url = \"https://echo.free.beeceptor.com\" <p>Choose a unique id for your Asset.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\nasset_id = \"my-asset-id\"\n</pre> # Some unique ID asset_id = \"my-asset-id\" <p>Creates an Asset with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\"\npayload = {\n  \"@context\": {},\n  \"@id\": asset_id,\n  \"properties\": {\n    \"name\": f\"API at {api_url}\",\n    \"description\": \"EDR test\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"HttpData\",\n    \"baseUrl\": api_url,\n    \"proxyMethod\": \"true\",  # allow methods other than GET\n    \"proxyBody\": \"true\"     # allow request bodies\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Asset with ID: {asset_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/assets\" payload = {   \"@context\": {},   \"@id\": asset_id,   \"properties\": {     \"name\": f\"API at {api_url}\",     \"description\": \"EDR test\"   },   \"dataAddress\": {     \"@type\": \"DataAddress\",     \"type\": \"HttpData\",     \"baseUrl\": api_url,     \"proxyMethod\": \"true\",  # allow methods other than GET     \"proxyBody\": \"true\"     # allow request bodies   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Asset with ID: {asset_id}\") <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\npolicy_id = \"my-policy-id\"\n</pre> # Some unique ID policy_id = \"my-policy-id\" <p>Choose a policy. Here a policy allowing anyone access is chosen.</p> In\u00a0[\u00a0]: Copied! <pre># Some ODRL policy\npolicy = {\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> # Some ODRL policy policy = {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } <p>Creates a Policy with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/policydefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": policy_id,\n  \"policy\": policy\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Policy with ID: {policy_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/policydefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": policy_id,   \"policy\": policy }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Policy with ID: {policy_id}\") <p>Here you create a Contract whose role it is to assign Policies to Assets. The contract's \"Access Policy\" sets the terms and conditions under which the Asset will be visible as an Offer in the Catalog and the \"Contract Policy\" sets the terms and conditions under which the Negotiation for an Offer will be agreed. The \"Assets Selector\" determines to which Assets the Policies are \"assigned\" to.</p> <p>Choose a unique id for your Policy.</p> In\u00a0[\u00a0]: Copied! <pre># Some unique ID\ncontract_id = \"my-policy-id\"\n</pre> # Some unique ID contract_id = \"my-policy-id\" <p>Creates a Contract with the given values.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/contractdefinitions\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@id\": contract_id,\n  \"accessPolicyId\": policy_id,\n  \"contractPolicyId\": policy_id,\n  \"assetsSelector\": {\n    \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"operator\": \"=\",\n    \"operandRight\": asset_id\n  }\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Created Contract Definition with ID: {contract_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/contractdefinitions\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"@id\": contract_id,   \"accessPolicyId\": policy_id,   \"contractPolicyId\": policy_id,   \"assetsSelector\": {     \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",     \"operator\": \"=\",     \"operandRight\": asset_id   } }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status() print(f\"Created Contract Definition with ID: {contract_id}\") <p>If everything was successful the Asset will be now available to others as an Offer in your Catalog.</p>"},{"location":"jupyter/offer-service-http/#offer-service-http","title":"Offer Service (HTTP)\u00b6","text":"<p>With this notebook you can create an offer for use of a REST API via <code>HTTP</code>.</p>"},{"location":"jupyter/offer-service-http/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/offer-service-http/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/offer-service-http/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/offer-service-http/#create-asset","title":"Create Asset\u00b6","text":"<p>Here you create an Asset for access of the API you want to offer. The Asset on one hand describes what kind of data is offered (properties) and on the other hand how the Connector can eventually make requests to (dataAddress). However, this will be not be available for others as an Offer just yet.</p>"},{"location":"jupyter/offer-service-http/#create-policy","title":"Create Policy\u00b6","text":"<p>Here you create a Policy which is basically a collection of terms and conditions. This will later be \"assigned\" to the Asset in order to make it available for others given they meet the conditions.</p>"},{"location":"jupyter/offer-service-http/#create-contract-definition","title":"Create Contract Definition\u00b6","text":""},{"location":"jupyter/policies/","title":"Policies","text":"In\u00a0[\u00a0]: Copied! <pre>{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\"\n    }\n  ]\n}\n</pre> {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\"     }   ] } In\u00a0[\u00a0]: Copied! <pre>bpn = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": {\n        \"odrl:or\": [\n          {\n            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": bpn\n          }\n        ]\n      }\n    }\n  ]\n}\n</pre> bpn = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": {         \"odrl:or\": [           {             \"odrl:leftOperand\": \"BusinessPartnerNumber\",             \"odrl:operator\": {               \"@id\": \"odrl:eq\"             },             \"odrl:rightOperand\": bpn           }         ]       }     }   ] } In\u00a0[\u00a0]: Copied! <pre>time_from = \"2023-01-01T00:00:01Z\"\ntime_to = \"2026-01-01T00:00:01Z\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:and\": [\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:gteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": time_from,\n                \"@type\": \"xsd:datetime\"\n              }\n            },\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:lteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": time_to,\n                \"@type\": \"xsd:datetime\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</pre> time_from = \"2023-01-01T00:00:01Z\" time_to = \"2026-01-01T00:00:01Z\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:and\": [             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:gteq\"               },               \"odrl:rightOperand\": {                 \"@value\": time_from,                 \"@type\": \"xsd:datetime\"               }             },             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:lteq\"               },               \"odrl:rightOperand\": {                 \"@value\": time_to,                 \"@type\": \"xsd:datetime\"               }             }           ]         }       ]     }   ] } In\u00a0[\u00a0]: Copied! <pre>duration = \"1d\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:and\": [\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:gteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": \"contractAgreement+0s\",\n                \"@type\": \"dateExpression\"\n              }\n            },\n            {\n              \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:lteq\"\n              },\n              \"odrl:rightOperand\": {\n                \"@value\": f\"contractAgreement+{duration}\",\n                \"@type\": \"dateExpression\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</pre> duration = \"1d\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:and\": [             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:gteq\"               },               \"odrl:rightOperand\": {                 \"@value\": \"contractAgreement+0s\",                 \"@type\": \"dateExpression\"               }             },             {               \"odrl:leftOperand\": \"https://w3id.org/edc/v0.0.1/ns/inForceDate\",               \"odrl:operator\": {                 \"@id\": \"odrl:lteq\"               },               \"odrl:rightOperand\": {                 \"@value\": f\"contractAgreement+{duration}\",                 \"@type\": \"dateExpression\"               }             }           ]         }       ]     }   ] } In\u00a0[\u00a0]: Copied! <pre>group = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": [\n        {\n          \"odrl:leftOperand\": \"https://w3id.org/tractusx/v0.0.1/ns/BusinessPartnerGroup\",\n          \"odrl:operator\": {\n            \"@id\": \"odrl:isPartOf\"\n          },\n          \"odrl:rightOperand\": group\n        }\n      ]\n    }\n  ]\n}\n</pre> group = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": [         {           \"odrl:leftOperand\": \"https://w3id.org/tractusx/v0.0.1/ns/BusinessPartnerGroup\",           \"odrl:operator\": {             \"@id\": \"odrl:isPartOf\"           },           \"odrl:rightOperand\": group         }       ]     }   ] } <p>A BPN can be added to a BPN group by sending a POST request with the following payload to /management/business-partner-groups. The group does not need to be created separately first.</p> In\u00a0[\u00a0]: Copied! <pre>group = \"...\"\nbpn = \"...\"\n\n{\n  \"@context\": {\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"\n  },\n  \"@id\": bpn,\n  \"tx:groups\": [\n    group\n  ]\n}\n</pre> group = \"...\" bpn = \"...\"  {   \"@context\": {     \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"   },   \"@id\": bpn,   \"tx:groups\": [     group   ] } In\u00a0[\u00a0]: Copied! <pre>credential = \"...\"\n\n{\n  \"@type\": \"odrl:Set\",\n  \"odrl:permission\": [\n    {\n      \"odrl:action\": \"USE\",\n      \"odrl:constraint\": {\n        \"odrl:or\": [\n          {\n            \"odrl:leftOperand\": credential,\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": \"active\"\n          }\n        ]\n      }\n    }\n  ]\n}\n</pre> credential = \"...\"  {   \"@type\": \"odrl:Set\",   \"odrl:permission\": [     {       \"odrl:action\": \"USE\",       \"odrl:constraint\": {         \"odrl:or\": [           {             \"odrl:leftOperand\": credential,             \"odrl:operator\": {               \"@id\": \"odrl:eq\"             },             \"odrl:rightOperand\": \"active\"           }         ]       }     }   ] }"},{"location":"jupyter/policies/#policies","title":"Policies\u00b6","text":"<p>This is a collection of Policies that can be used in the Dataspace.</p> <p>There exists also a repository to get familiar with creating policies, see EdcPolicyPlayground.</p>"},{"location":"jupyter/policies/#blank-policy","title":"Blank Policy\u00b6","text":"<p>A policy that has no conditions.</p>"},{"location":"jupyter/policies/#bpn-policy","title":"BPN Policy\u00b6","text":"<p>A policy that requires to have a specific BPN (unique ID for Connectors in the Dataspace).</p>"},{"location":"jupyter/policies/#time-interval-policy","title":"Time Interval Policy\u00b6","text":"<p>A policy the requires the current time for the transfer to be in a certain interval.</p> <p>Note: You will need to add <code>\"xsd\": \"http://www.w3.org/2001/XMLSchema#\"</code> to <code>@context</code>.</p>"},{"location":"jupyter/policies/#time-duration-policy","title":"Time Duration Policy\u00b6","text":"<p>A policy the requires the current time for the transfer to be within up to a certain time of the generation of an Agreement.</p>"},{"location":"jupyter/policies/#bpn-group-policy","title":"BPN Group Policy\u00b6","text":"<p>A policy that requires to be part of a specific BPN group.</p>"},{"location":"jupyter/policies/#credential-policy","title":"Credential Policy\u00b6","text":"<p>A policy that requires to hold a specific Credential.</p>"},{"location":"jupyter/transfer-file-amazon/","title":"Transfer File (AmazonS3)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> from pprint import pprint import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your AmazonS3 storage\naws_url = \"https://s3.us-east-1.amazonaws.com\"\n# The region of your AmazonS3 storage\naws_region = \"us-east-1\"\n# The username (Access Key ID) of your AmazonS3 storage account\naws_username = \"my-access-key-id\"\n# The password (Secret Access ID) of your AmazonS3 storage account\naws_password = \"my-secret-access-key\"\n# The bucket where the file should be stored in\naws_bucket = \"my-bucket\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://api.adsel.space/connectors/alice/dsp\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your AmazonS3 storage aws_url = \"https://s3.us-east-1.amazonaws.com\" # The region of your AmazonS3 storage aws_region = \"us-east-1\" # The username (Access Key ID) of your AmazonS3 storage account aws_username = \"my-access-key-id\" # The password (Secret Access ID) of your AmazonS3 storage account aws_password = \"my-secret-access-key\" # The bucket where the file should be stored in aws_bucket = \"my-bucket\" # The DSP address of the Connector providing the offer originator = \"https://api.adsel.space/connectors/alice/dsp\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"AmazonS3-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"AmazonS3\",\n    \"region\": aws_region,\n    \"endpointOverride\": aws_url,\n    \"accessKeyId\": aws_username,\n    \"secretAccessKey\": aws_password,\n    \"bucketName\": aws_bucket,\n    \"keyName\": \"dummy\"\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"AmazonS3-PUSH\",   \"dataDestination\": {     \"type\": \"AmazonS3\",     \"region\": aws_region,     \"endpointOverride\": aws_url,     \"accessKeyId\": aws_username,     \"secretAccessKey\": aws_password,     \"bucketName\": aws_bucket,     \"keyName\": \"dummy\"   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the Transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the file should now be in your storage.</p>"},{"location":"jupyter/transfer-file-amazon/#transfer-file-amazons3","title":"Transfer File (AmazonS3)\u00b6","text":"<p>With this notebook you can transfer an offered file for which you already have an Agreement to an <code>AmazonS3</code> storage.</p>"},{"location":"jupyter/transfer-file-amazon/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-file-amazon/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-file-amazon/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-file-amazon/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your storage.</p>"},{"location":"jupyter/transfer-file-azure/","title":"Transfer File (AzureStorage)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> from pprint import pprint import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# Your account in the Azure Storage\nazure_account = \"my-account\"\n# The secret in the vault where your SAS token for Azure Storage is stored\nazure_sas = \"my-sas-secret-name\"\n# The container where the file should be stored in\nazure_container = \"my-container\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://api.adsel.space/connectors/alice/dsp\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # Your account in the Azure Storage azure_account = \"my-account\" # The secret in the vault where your SAS token for Azure Storage is stored azure_sas = \"my-sas-secret-name\" # The container where the file should be stored in azure_container = \"my-container\" # The DSP address of the Connector providing the offer originator = \"https://api.adsel.space/connectors/alice/dsp\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the Transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"AmazonS3-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"AmazonS3\",\n    \"container\": azure_container,\n    \"account\": azure_account,\n    \"keyName\": azure_sas,\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"AmazonS3-PUSH\",   \"dataDestination\": {     \"type\": \"AmazonS3\",     \"container\": azure_container,     \"account\": azure_account,     \"keyName\": azure_sas,   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the Transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/backend/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the file should now be in your storage.</p>"},{"location":"jupyter/transfer-file-azure/#transfer-file-azurestorage","title":"Transfer File (AzureStorage)\u00b6","text":"<p>With this notebook you can transfer an offered file for which you already have an Agreement to an <code>AzureStorage</code> storage.</p> <p>WARNING: Due to a known bug in the TractusX-EDC, the transfer will not succeed and instead corrupt your Connector's database. Proceed with caution.</p>"},{"location":"jupyter/transfer-file-azure/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-file-azure/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-file-azure/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p> <p>Note that unlike the <code>AmazonS3</code> example, here you can not provide the URL of your storage directly. Neither can you specify your password (Account Key). Instead the URL is a Connector wide setting which can only be configured when creating or editing a Connector. Additionally, instaed of a providing a password a SAS token is retrieved from the vault. For this you will need to manually generate a SAS token and put it into the vault as a JSON string.</p> <p>An example SAS token as a JSON string to put into the vault is provided here</p> <pre>{\n    \"edctype\": \"dataspaceconnector:azuretoken\",\n    \"sas\": \"se=2025-05-20T13%3A31%3A26Z&amp;sp=w&amp;sv=2025-05-05&amp;sr=c&amp;sig=ghRxJvgnvlnN96xzc1trTj4R4cJtaH7glNnjdCXE3iQ%3D\"\n}\n</pre>"},{"location":"jupyter/transfer-file-azure/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your storage.</p>"},{"location":"jupyter/transfer-http-pull/","title":"Transfer HTTP (Pull)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> from pprint import pprint import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The BPN of the Connector providing the offer\nprovider_id = \"BPNL123456789ABC\" \n# The DSP address of the Connector providing the offer\noriginator = \"https://api.adsel.space/connectors/alice/dsp\"\n# The policy of the offer\npolicy = {\n    \"@id\": \"some-uuid:some-uuid:some-uuid\",\n    \"@type\": \"odrl:Offer\",\n    \"odrl:permission\": [],\n    \"odrl:prohibition\": [],\n    \"odrl:obligation\": []\n}\n# The ID of the Asset in the offer\noffered_asset_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The BPN of the Connector providing the offer provider_id = \"BPNL123456789ABC\"  # The DSP address of the Connector providing the offer originator = \"https://api.adsel.space/connectors/alice/dsp\" # The policy of the offer policy = {     \"@id\": \"some-uuid:some-uuid:some-uuid\",     \"@type\": \"odrl:Offer\",     \"odrl:permission\": [],     \"odrl:prohibition\": [],     \"odrl:obligation\": [] } # The ID of the Asset in the offer offered_asset_id = \"some-random-uuid\" <p>Here you start an EDR Negotiation for the Offer chosen in the previous step. This performs the usual Negotiation and Tranfer in such a way that you can later retrieve access tokens. If the given conditions are satisfied the EDR Negotiation will succeed and an Agreement will be created.</p> <p>Starts the EDR Negotiation using the values got from the previous step.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs\"\npayload = {\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"counterPartyAddress\": originator,\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}}\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\n\nnegotiation_id = response.json()[\"@id\"]\nprint(f\"Started EDR Negotiation with ID: {negotiation_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs\" payload = { \t\"@context\": { \t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\" \t}, \t\"counterPartyAddress\": originator, \t\"protocol\": \"dataspace-protocol-http\", \t\"policy\": policy | {\"odrl:assigner\": {\"@id\": provider_id}, \"odrl:target\": {\"@id\": offered_asset_id}} }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status()  negotiation_id = response.json()[\"@id\"] print(f\"Started EDR Negotiation with ID: {negotiation_id}\") <p>As mentioned the EDR starts a Negotiation and a Transfer. Information about the Negotiation can be easily accessed by the below request since we know its ID from the previous step. However, for the transfer we do not know the ID so it is not as easy to get information on it at this point.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/contractnegotiations/{negotiation_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Negotiation data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/contractnegotiations/{negotiation_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Negotiation data:\\n\") pprint(response.json()) <p>Gets all EDRs for the chosen asset.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs/request\"\npayload = {\n  \"@context\": {},\n  \"@type\": \"QuerySpec\",\n  \"filterExpression\": [\n        {\n            \"operandLeft\": \"assetId\",\n            \"operator\": \"=\",\n            \"operandRight\": offered_asset_id\n        }\n        \n    ]\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nresponse.raise_for_status()\n\nprint(f\"EDRs data:\\n\")\npprint(response.json())\n\ntransfer_id = response.json()[0][\"transferProcessId\"]\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs/request\" payload = {   \"@context\": {},   \"@type\": \"QuerySpec\",   \"filterExpression\": [         {             \"operandLeft\": \"assetId\",             \"operator\": \"=\",             \"operandRight\": offered_asset_id         }              ] }  response = requests.post(url, json=payload, headers=token_header) response.raise_for_status()  print(f\"EDRs data:\\n\") pprint(response.json())  transfer_id = response.json()[0][\"transferProcessId\"] <p>Uses the Transfer Id from the previous step to get the acccess token.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs/{transfer_id}/dataaddress\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\n\nprint(f\"EDR data:\\n\")\npprint(response.json())\n\naccess_token = response.json()[\"authorization\"]\nendpoint = response.json()[\"endpoint\"]\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/edrs/{transfer_id}/dataaddress\"  response = requests.get(url, headers=token_header) response.raise_for_status()  print(f\"EDR data:\\n\") pprint(response.json())  access_token = response.json()[\"authorization\"] endpoint = response.json()[\"endpoint\"] In\u00a0[\u00a0]: Copied! <pre>headers = {\"Authorization\": access_token}\n\npayload = {\n    \"test\": \"This is a test.\"\n}\n\nendpoint = f\"{base_url}/backend/connectors/alice/public\"\nresponse = requests.post(endpoint, headers=headers, json=payload)\n\nprint(\"Response:\")\npprint(response.json())\n</pre> headers = {\"Authorization\": access_token}  payload = {     \"test\": \"This is a test.\" }  endpoint = f\"{base_url}/backend/connectors/alice/public\" response = requests.post(endpoint, headers=headers, json=payload)  print(\"Response:\") pprint(response.json()) <p>If everything was successful you should now be able to see the response from the service.</p>"},{"location":"jupyter/transfer-http-pull/#transfer-http-pull","title":"Transfer HTTP (Pull)\u00b6","text":"<p>With this notebook you can send request to an offered service.</p>"},{"location":"jupyter/transfer-http-pull/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps. Unlike in the HTTP Push, here you will not be able to use a preexisting regular agreement. Instead the Negotiation and Transfer will be handled via the EDR (Endpoint Data Reference) endpoints. For more information, see TractusX-EDC Walkthrough.</p>"},{"location":"jupyter/transfer-http-pull/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assing the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-http-pull/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-http-pull/#initiate-edr-negotiation","title":"Initiate EDR Negotiation\u00b6","text":""},{"location":"jupyter/transfer-http-pull/#get-edr","title":"Get EDR\u00b6","text":"<p>Here you will get the access token.</p>"},{"location":"jupyter/transfer-http-pull/#access-the-service","title":"Access the Service\u00b6","text":"<p>Now you can use the access token to make requests to the offered service. Your request will go to the provider's Connector which will confirm the existence and validity of the associated Agreeement and then reroute your request to the service. Finally the Connector will send back the response of the service.</p>"},{"location":"jupyter/transfer-http-push/","title":"Transfer HTTP (Push)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\nimport requests\n\nbase_url = \"https://api.adsel.space\"\n</pre> from pprint import pprint import requests  base_url = \"https://api.adsel.space\" In\u00a0[\u00a0]: Copied! <pre># Your JWT recevied from Keycloak via sso.adsel.space\ntoken = \"ey...\"\ntoken_header = {\"Authorization\": f\"Bearer {token}\"}\n# The name of your Connector\nconnector_name = \"my-connector\"\n# The URL of your endpoint where the data should be sent to\nendpoint_url = \"https://my-endpoint.requestcatcher.com\"\n# The DSP address of the Connector providing the offer\noriginator = \"https://api.adsel.space/connectors/alice/dsp\"\n# The ID of the Agreement for the offer\nagreement_id = \"some-random-uuid\"\n</pre> # Your JWT recevied from Keycloak via sso.adsel.space token = \"ey...\" token_header = {\"Authorization\": f\"Bearer {token}\"} # The name of your Connector connector_name = \"my-connector\" # The URL of your endpoint where the data should be sent to endpoint_url = \"https://my-endpoint.requestcatcher.com\" # The DSP address of the Connector providing the offer originator = \"https://api.adsel.space/connectors/alice/dsp\" # The ID of the Agreement for the offer agreement_id = \"some-random-uuid\" <p>Initiates the transfer.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/transferprocesses\"\npayload = {\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"counterPartyAddress\": originator,\n  \"contractId\": agreement_id,\n  \"transferType\": \"HttpData-PUSH\",\n  \"dataDestination\": {\n    \"type\": \"HttpData\",\n    \"baseUrl\": endpoint_url,\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}\n\nresponse = requests.post(url, json=payload, headers=token_header)\nprint(response.content)\nresponse.raise_for_status()\n\ntransfer_id = response.json()[\"@id\"]\nprint(f\"Started Transfer with ID: {transfer_id}\")\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/transferprocesses\" payload = {   \"@context\": {     \"odrl\": \"http://www.w3.org/ns/odrl/2/\"   },   \"counterPartyAddress\": originator,   \"contractId\": agreement_id,   \"transferType\": \"HttpData-PUSH\",   \"dataDestination\": {     \"type\": \"HttpData\",     \"baseUrl\": endpoint_url,   },   \"protocol\": \"dataspace-protocol-http\" }  response = requests.post(url, json=payload, headers=token_header) print(response.content) response.raise_for_status()  transfer_id = response.json()[\"@id\"] print(f\"Started Transfer with ID: {transfer_id}\") <p>Confirms that the transfer succeeded.</p> In\u00a0[\u00a0]: Copied! <pre>url = f\"{base_url}/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"\n\nresponse = requests.get(url, headers=token_header)\nresponse.raise_for_status()\nprint(f\"Transfer data:\\n\")\npprint(response.json())\n</pre> url = f\"{base_url}/connectors/{connector_name}/management/v3/transferprocesses/{transfer_id}\"  response = requests.get(url, headers=token_header) response.raise_for_status() print(f\"Transfer data:\\n\") pprint(response.json()) <p>If everything was successful the data should now have been sent to your endpoint.</p>"},{"location":"jupyter/transfer-http-push/#transfer-http-push","title":"Transfer HTTP (Push)\u00b6","text":"<p>With this notebook you can transfer data from an offer for which you already have an Agreement to an <code>HTTP</code> endpoint.</p>"},{"location":"jupyter/transfer-http-push/#preperation","title":"Preperation\u00b6","text":"<p>Here some values are initialized that will be necessary for the other steps.</p>"},{"location":"jupyter/transfer-http-push/#set-up","title":"Set up\u00b6","text":"<p>Import the requests module and assign the base url of the Dataspace as a variable.</p>"},{"location":"jupyter/transfer-http-push/#fill-in-values","title":"Fill in Values\u00b6","text":"<p>Fill in the values for the variables below.</p>"},{"location":"jupyter/transfer-http-push/#initiate-transfer","title":"Initiate Transfer\u00b6","text":"<p>Here you will request for the transfer of the data to your endpoint.</p>"}]}